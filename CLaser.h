//=============================================================================
//
// レーザー処理 [CLaser.h]
// Author : JUN MARUYAMA
// Since  : 2015/06/12
//
//   レーザーの仕組み
//   m_endPostion.xに毎フレーム m_fMoveSpeed足されていく
//   でどんどん伸びていくのを、行列で回転させて移動させていく
//   当たり判定を行う際はm_world〜〜Positonが実際に描画を行っている座標なので
//   m_worldEndPositionを持ってきて、円で当たり判定をするなり
//   m_worldStartPosも持ってきて四角なりレイなりどうぞ
//
//   m_direction →
//   -------------------------------------------------->
//   |                                                |>
//   * ←m_worldStartPosition    m_worldEndPosition→ *>
//   |                                                |>
//   -------------------------------------------------->
//
//=============================================================================
//*****************************************************************************
// インクルードガード
//*****************************************************************************
#pragma once

//*****************************************************************************
// インクルード
//*****************************************************************************
#include "CScene.h"

//*****************************************************************************
// レーザークラス
//*****************************************************************************
class CLaser : public CScene
{
public:

	// 進行方向
	enum DIRECTION
	{
		DIRECTION_RIGHT = 0,
		DIRECTION_DOWN,
		DIRECTION_LEFT,
		DIRECTION_UP,
		DIRECTION_MAX,
	};

	//=============================================================================
	// コンストラクタ
	// arg : const int layer(描画順番)
	//=============================================================================
	CLaser(const int layer = 1);

	//=============================================================================
	// デストラクタ
	//=============================================================================
	~CLaser();

	//=============================================================================
	// 終了処理
	//=============================================================================
	void Uninit(void);

	//=============================================================================
	// 更新処理
	//=============================================================================
	void Update(void);

	//=============================================================================
	// 描画処理
	//=============================================================================
	void Draw(void);

	//=============================================================================
	// 生成処理
	// arg1   : const D3DXVECTOR3& start_position(レーザー射出口座標)
	// arg2   : const DIRECTION& direction(射出方向)
	// return : CLaser*(生成されたレーザポインタ)
	//=============================================================================
	static CLaser* Create(const D3DXVECTOR3& start_position, const DIRECTION& direction);

	//=============================================================================
	// ポジション(ゲッター/セッター)
	// ゲッターはスタート座標を取ってくる
	// セッターは用意しただけ。内部処理はなにもしていない(変えて欲しくないので)
	//=============================================================================
	D3DXVECTOR3 GetPosition(void) { return m_worldStartPosition; }
	void SetPosition(D3DXVECTOR3 pos){ }
	void SetPosition(float x, float y, float z){ }

	//=============================================================================
	// ローテーション(ゲッター/セッター)
	// ゲッターはローテーションを取ってくる
	// セッターは用意しただけ。内部処理はなにもしていない(変えて欲しくないので)
	//=============================================================================
	D3DXVECTOR3 GetRotation(void){ return m_rotation; }
	void SetRotation(D3DXVECTOR3 rot){ }
	void SetRotation(float x, float y, float z){ }

	//=============================================================================
	// エンドポジションゲッター
	// レーザーの終端の座標を取ってくる。
	// セッターは用意なし
	//=============================================================================
	D3DXVECTOR3 GetWorldEndPosition(void){ return m_worldEndPosition; }

	//=============================================================================
	// 進行(中断/再開)
	//=============================================================================
	void MoveStop(void);
	void MoveRestart(void);

private:

	//=============================================================================
	// 初期化処理
	// return : HRESULT(成否)
	// Create関数内で呼ぶ。外部からは隠してます
	//=============================================================================
	HRESULT Init(void);

	//=============================================================================
	// セッター
	// Create関数内で呼ぶ。外部からは隠してます
	//=============================================================================
	void SetStartPosition(const D3DXVECTOR3& position){ m_startPosition = position; }
	void SetDirection(const DIRECTION& direction){ m_direction = direction; }

	//=============================================================================
	// (頂点バッファ/テクスチャ)生成処理
	// Init内で使用。外部からは隠してます
	//=============================================================================
	void CreateVertexBuffer(void);
	void CreateTexture(void);

	//=============================================================================
	// 回転角度計算処理
	// Init内で使用。外部からは隠してます
	//=============================================================================
	void CalcRotation(void);

	//=============================================================================
	// 頂点バッファ更新処理
	// Update内で使用。外部からは隠してます
	//=============================================================================
	void UpdateVertexBuffer(void);

	LPDIRECT3DVERTEXBUFFER9 m_pVertexBuffer;		// 頂点バッファ
	LPDIRECT3DTEXTURE9 m_pTexture;					// テクスチャ
	D3DXVECTOR3 m_startPosition;					// 射出座標(レーザーを伸ばす際に使う。マトリクス生成用)
	D3DXVECTOR3 m_endPosition;						// 終端座標(レーザーを伸ばす際に使う。マトリクス生成用)
	D3DXVECTOR3 m_worldStartPosition;				// 射出座標(ワールド座標)
	D3DXVECTOR3 m_worldEndPosition;					// 終端座標(ワールド座標)
	DIRECTION m_direction;							// 射出方向
	D3DXVECTOR3 m_rotation;							// 回転角度
	float m_fMoveSpeed;								// 進行スピード
};

