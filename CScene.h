/*-----------------------------------------------------------------------------
	オブジェクトクラス
	author	OkadaMoeto
	since	20140416
-----------------------------------------------------------------------------*/

// ２重インクルード防止
#pragma once

/*-----------------------------------------------------------------------------
	インクルードファイル
-----------------------------------------------------------------------------*/
#include "Main.h"

/*-----------------------------------------------------------------------------
	オブジェクトクラス
-----------------------------------------------------------------------------*/
class CScene
{
	public:
		// オブジェクト種類
		enum OBJTYPE
		{
			OBJTYPE_NULL = 0,
			OBJTYPE_2D,
			OBJTYPE_3D,
			OBJTYPE_BILLBOARD,
			OBJTYPE_X,
			OBJTYPE_MOTION_MODEL,
			OBJTYPE_MESHFIELD,
			OBJTYPE_MESHWALL,
			OBJTYPE_MESHDOME,
			OBJTYPE_MESHCYLINDER,
			OBJTYPE_MESHORBIT,
			OBJTYPE_NUMBER,
			OBJTYPE_SCORE,
			OBJTYPE_TIMER,
			OBJTYPE_FADE,
			OBJTYPE_SHADOW,
			OBJTYPE_PLAYER,
			OBJTYPE_ENEMY,
			OBJTYPE_BULLET,
			OBJTYPE_EXSPLOSION,
			OBJTYPE_GIMMICK,
			OBJTYPE_MAX
		};

		// 描画優先度レイヤ数（０〜７）
		static const int NUM_PRIORITY = 8;

		/*-----------------------------------------------------------------------------
			コンストラクタ
			param	priority		描画優先度順番指定
			param	objtype			オブジェクトタイプ指定
		-----------------------------------------------------------------------------*/
		CScene(int priority = 3, OBJTYPE objtype = OBJTYPE_NULL);
		virtual ~CScene();

		/*-----------------------------------------------------------------------------
			描画優先度順番を取得
			return	int		描画優先度番号
		-----------------------------------------------------------------------------*/
		int GetPriority(void){ return m_drawLayerPriority; }

		/*-----------------------------------------------------------------------------
			双方向リストの先頭ポインタ取得
			return	CScene*		双方向リストの先頭ポインタ
		-----------------------------------------------------------------------------*/
		static CScene* GetListTop(int priority);

		/*-----------------------------------------------------------------------------
			双方向リストの次オブジェクト取得
			return	CScene*		次オブジェクトのポインタ
		-----------------------------------------------------------------------------*/
		CScene* GetNext(void){ return m_pNext; }

		/*-----------------------------------------------------------------------------
			全オブジェクト更新
		-----------------------------------------------------------------------------*/
		static void UpdateAll(void);
		/*-----------------------------------------------------------------------------
			全オブジェクト描画
		-----------------------------------------------------------------------------*/
		static void DrawAll(void);
		/*-----------------------------------------------------------------------------
			全オブジェクト解放
		-----------------------------------------------------------------------------*/
		static void ReleaseAll(void);

		/*-----------------------------------------------------------------------------
			初期化
			return	HRESULT		初期化結果
		-----------------------------------------------------------------------------*/
		virtual HRESULT Init(void){ return S_OK; }
		/*-----------------------------------------------------------------------------
			終了
		-----------------------------------------------------------------------------*/
		virtual void Uninit(void) = 0;
		/*-----------------------------------------------------------------------------
			更新
		-----------------------------------------------------------------------------*/
		virtual void Update(void) = 0;
		/*-----------------------------------------------------------------------------
			描画
		-----------------------------------------------------------------------------*/
		virtual void Draw(void) = 0;

		/*-----------------------------------------------------------------------------
			現在座標の取得
			return	D3DXVECTOR3		現在座標
		-----------------------------------------------------------------------------*/
		virtual D3DXVECTOR3 GetPosition(void) = 0;
		/*-----------------------------------------------------------------------------
			現在座標の設定
			param	D3DXVECTOR3		現在座標の設定値
		-----------------------------------------------------------------------------*/
		virtual void SetPosition(D3DXVECTOR3 pos) = 0;
		/*-----------------------------------------------------------------------------
			現在座標の設定
			param	x		現在座標Xの設定値
			param	y		現在座標Yの設定値
			param	z		現在座標Zの設定値
		-----------------------------------------------------------------------------*/
		virtual void SetPosition(float x, float y, float z) = 0;

		/*-----------------------------------------------------------------------------
			現在向きの取得
			return	D3DXVECTOR3		現在向き
		-----------------------------------------------------------------------------*/
		virtual D3DXVECTOR3 GetRotation(void) = 0;
		/*-----------------------------------------------------------------------------
			現在向きの設定
			param	D3DXVECTOR3		現在向きの設定値
		-----------------------------------------------------------------------------*/
		virtual void SetRotation(D3DXVECTOR3 rot) = 0;
		/*-----------------------------------------------------------------------------
			現在向きの設定
			param	x		現在向きXの設定値
			param	y		現在向きYの設定値
			param	z		現在向きZの設定値
		-----------------------------------------------------------------------------*/
		virtual void SetRotation(float x, float y, float z) = 0;

		/*-----------------------------------------------------------------------------
			前回座標の取得
			return	D3DXVECTOR3		前回座標
		-----------------------------------------------------------------------------*/
		virtual D3DXVECTOR3 GetPositionOld(void){ return D3DXVECTOR3(0.0f, 0.0f, 0.0f); }
		/*-----------------------------------------------------------------------------
			前回座標の設定
			param	D3DXVECTOR3		前回座標の設定値
		-----------------------------------------------------------------------------*/
		virtual void SetPositionOld(D3DXVECTOR3 pos){};
		/*-----------------------------------------------------------------------------
			前回座標の設定
			param	x		前回座標Xの設定値
			param	y		前回座標Yの設定値
			param	z		前回座標Zの設定値
		-----------------------------------------------------------------------------*/
		virtual void SetPositionOld(float x, float y, float z){};

		/*-----------------------------------------------------------------------------
			前回向きの取得
			return	D3DXVECTOR3		前回向き
		-----------------------------------------------------------------------------*/
		virtual D3DXVECTOR3 GetRotationOld(void){ return D3DXVECTOR3(0.0f, 0.0f, 0.0f); }
		/*-----------------------------------------------------------------------------
			前回向きの設定
			param	D3DXVECTOR3		前回向きの設定値
		-----------------------------------------------------------------------------*/
		virtual void SetRotationOld(D3DXVECTOR3 pos){};
		/*-----------------------------------------------------------------------------
			前回向きの設定
			param	x		前回向きXの設定値
			param	y		前回向きYの設定値
			param	z		前回向きZの設定値
		-----------------------------------------------------------------------------*/
		virtual void SetRotationOld(float x, float y, float z){};

		/*-----------------------------------------------------------------------------
			立方体の下の平面の左下の頂点座標の取得
			return	D3DXVECTOR3		立方体の下の平面の左下の頂点座標
		-----------------------------------------------------------------------------*/
		virtual D3DXVECTOR3 GetVertexMin(void){ return D3DXVECTOR3(0.0f, 0.0f, 0.0f); }
		/*-----------------------------------------------------------------------------
			立方体の上の平面の右上の頂点座標の取得
			return	D3DXVECTOR3		立方体の上の平面の右上の頂点座標
		-----------------------------------------------------------------------------*/
		virtual D3DXVECTOR3 GetVertexMax(void){ return D3DXVECTOR3(0.0f, 0.0f, 0.0f); }

		/*-----------------------------------------------------------------------------
			オブジェクトタイプの取得
			return	OBJTYPE		オブジェクトタイプ
		-----------------------------------------------------------------------------*/
		OBJTYPE GetObjtype(void){ return m_objtype; }
		/*-----------------------------------------------------------------------------
			オブジェクトタイプの設定
			param	objtype		オブジェクトタイプの設定
		-----------------------------------------------------------------------------*/
		void SetObjtype(OBJTYPE objtype){ m_objtype = objtype; }

		/*-----------------------------------------------------------------------------
			オブジェクト総数を取得
			return	int		オブジェクト総数
		-----------------------------------------------------------------------------*/
		static int GetNumObject(void){ return m_countScene; }

		/*-----------------------------------------------------------------------------
			更新するかどうかの設定
			param	b		更新するかどうかの設定値
		-----------------------------------------------------------------------------*/
		void SetUpdate(bool b){ m_bUpdate = b; }
		/*-----------------------------------------------------------------------------
			更新するかどうかの取得
			return	bool		更新するかどうかの値
		-----------------------------------------------------------------------------*/
		bool GetUpdate(void){ return m_bUpdate; }

		/*-----------------------------------------------------------------------------
			描画するかどうかの設定
			param	b		更新するかどうかの設定値
		-----------------------------------------------------------------------------*/
		void SetDraw(bool b){ m_bDraw = b; }
		/*-----------------------------------------------------------------------------
			描画するかどうかの取得
			return bool		描画するかどうかの値
		-----------------------------------------------------------------------------*/
		bool GetDraw(void){ return m_bDraw; }

		/*-----------------------------------------------------------------------------
			グローバルなオブジェクトかどうかの設定
			param	b		グローバルなオブジェクトかどうかの値
		-----------------------------------------------------------------------------*/
		void SetGlobal(bool b){ m_bGlobal = b; }
		/*-----------------------------------------------------------------------------
			グローバルなオブジェクトかどうかの取得
			return	b		グローバルなオブジェクトかどうかの値
		-----------------------------------------------------------------------------*/
		bool GetGlobal(void){ return m_bGlobal; }

	protected:
		/*-----------------------------------------------------------------------------
			オブジェクトのデスフラグON
		-----------------------------------------------------------------------------*/
		void Release(void);

	private:
		// 双方向リストに自分自身を登録
		void LinkList(int priority);
		// 双方向リストから自分自身を削除
		void UnlinkList(void);

		// リスト先頭位置へのポインタ
		static CScene* m_pTop[NUM_PRIORITY];
		// リスト現在位置へのポインタ
		static CScene* m_pCur[NUM_PRIORITY];
		// 前オブジェクトへのポインタ
		CScene* m_pPrev;
		// 次オブジェクトへのポインタ
		CScene* m_pNext;

		// 描画優先度レイヤ番号
		int m_drawLayerPriority;
		
		// オブジェクト数
		static int m_countScene;

		// リストから削除（解放）するか？
		bool m_bDelete;

		// オブジェクト種類
		OBJTYPE m_objtype;

		// 更新するか？
		bool m_bUpdate;

		// 描画するか？
		bool m_bDraw;

		// グローバルなオブジェクトか？
		// 画面遷移したあとも継続して存在する
		bool m_bGlobal;
};
