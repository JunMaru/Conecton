//=============================================================================
//
// インプットコマンド処理 [CInputCommand.h]
// Author : JUN MARUYAMA
// Since  : 2015/06/22
//
// インプット系をまとめたクラス
// newしてInit呼んでUpdateをすると入力情報を読み込んできます。
// ここからちょっと一手間かけるとキーコンフィグが作れたりする。
// たぶん一日あればいける…はず
//
//=============================================================================
//*****************************************************************************
// インクルードガード
//*****************************************************************************
#pragma once

//*****************************************************************************
// インクルード
//*****************************************************************************
#include "Main.h"

//*****************************************************************************
// マクロ宣言
//*****************************************************************************
#define DEBUGMODE_INPUTCOMMAND (1)			// デバッグスイッチ。いつか消す(1:ON/0:OFF)

//*****************************************************************************
// 前方クラス宣言
//*****************************************************************************
class CInputKeyborad;
class CInputJoypad;

//*****************************************************************************
// インプットコマンドクラス
//*****************************************************************************
class CInputCommand
{
public:

	// コマンド情報
	enum COMMAND
	{
		COMMAND_ENTER = 1 << 0,
		COMMAND_CANCEL = 1 << 1,
		COMMAND_LEFT = 1 << 2,
		COMMAND_RIGHT = 1 << 3,
		COMMAND_UP = 1 << 4,
		COMMAND_DOWN = 1 << 5,
		COMMAND_CONNECT = 1 << 6,
		COMMAND_GIMMICKACTION = 1 << 7,
		COMMAND_PAUSE = 1 << 8,
		// 以下仮段階のもの。本実装ではCOMMAND_CHANGEANTONに集約される
#if DEBUGMODE_INPUTCOMMAND
		COMMAND_METTAL = 1 << 9,
		COMMAND_MINIMAMU = 1 << 10,
		COMMAND_POWERFULL = 1 << 11,
		COMMAND_NORMAL = 1 << 12,
		COMMAND_MAX = 13,
#else
		COMMAND_MAX = 9,
#endif
	};

	// キー情報とコマンド
	struct KEY2COM
	{
		unsigned short key;
		unsigned short command;
	};

	// ジョイパッド情報とコマンド
	struct JOY2COM
	{
		unsigned short joy;
		unsigned short command;
	};

	//=============================================================================
	// コンストラクタ
	// arg1 : CInputKeyboard *keyboard(使用しているキーボード情報ポインタ)
	// arg2 : CInputJoypad *joypad(使用しているジョイパッド情報ポインタ)
	//=============================================================================
	CInputCommand(CInputKeyboard *keyboard, CInputJoypad *joypad);

	//=============================================================================
	// デストラクタ
	//=============================================================================
	~CInputCommand();

	//=============================================================================
	// 初期化
	// return : HRESULT(成否)
	//=============================================================================
	HRESULT Init(void);

	//=============================================================================
	// 終了処理
	//=============================================================================
	void Uninit(void);

	//=============================================================================
	// 更新処理
	//=============================================================================
	void Update(void);

	//=============================================================================
	// プレス情報取得
	// arg : COMMAND command(プレス情報を取得したいコマンド)
	// return : bool(true:押している/false:押されていない)
	//=============================================================================
	bool IsPress(COMMAND command);

	//=============================================================================
	// トリガー情報取得
	// arg : COMMAND command(トリガー情報を取得したいコマンド)
	// return : bool(true:押した/false:押していない)
	//=============================================================================
	bool IsTrigger(COMMAND command);

	//=============================================================================
	// リリース情報取得
	// arg : COMMAND command(リリース情報を取得したいコマンド)
	// return : bool(true:離した/false:離していない)
	//=============================================================================
	bool IsRelease(COMMAND command);

	//=============================================================================
	// リピート情報取得
	// arg : COMMAND command(リピート情報を取得したいコマンド)
	// return : bool(true:押し続けている/false:押し続けていない)
	//=============================================================================
	bool IsRepeat(COMMAND command);

private:
	//=============================================================================
	// 情報チェック(キーボード/ジョイパッド)
	//=============================================================================
	void CheckKeyboard(void);
	void CheckJoypad(void);

	unsigned int m_controller;				// 入力情報
	unsigned int m_oldController;			// 1フレーム前の入力情報
	unsigned int m_repeatController;		// リピート情報
	KEY2COM m_key2com[COMMAND_MAX];			// キー情報とコマンドの関連付け変数
	JOY2COM m_joy2com[COMMAND_MAX];			// パッド情報とコマンドの関連付け変数
	CInputJoypad *m_pInputJoypad;			// ジョイパッド情報
	CInputKeyboard *m_pInputKeyboard;		// キーボード情報
};

